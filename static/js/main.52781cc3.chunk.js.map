{"version":3,"sources":["components/japan-map.module.css","components/japan-map-label.module.css","utils/helpers.js","constants/chart-options.js","components/SummaryChart.js","views/SummaryView.js","components/NumberSummary.js","components/TopNumbers.js","views/TitleView.js","components/DemographyChart.js","views/DemographyView.js","components/TestedChart.js","views/TestedView.js","components/PrefectureChart.js","views/PrefectureView.js","components/JapanMap.js","components/JapanMapLabel.js","views/MapView.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uniqByKeepLast","a","key","Map","map","x","values","getPercentage","base","value","toFixed","formatNumber","number","toString","replace","summaryChartOptions","tooltips","mode","intersect","itemSort","arr","callbacks","title","items","data","date","label","deaths","datasets","datasetIndex","index","recovered","active","cases","Number","hover","legend","display","scales","xAxes","gridLines","ticks","maxRotation","callback","Date","toLocaleDateString","fontColor","yAxes","stacked","prefectureChartOptions","tooltipItem","category","set","get","demographyChartOptions","testedChartOptions","SummaryChart","timeline","japanActive","japanRecovered","japanDeaths","chartRef","React","useRef","useEffect","contextRef","current","getContext","Chart","type","labels","t","backgroundColor","borderColor","pointRadius","hitRadius","options","height","ref","SummaryView","SUMMARY_DATA","summary","className","SUMMARY_COLORS","getColor","NumberSummary","percentage","TopNumbers","total","summaries","Object","entries","TitleView","length","DemographyChart","demography","chartLabels","d","generation","infected","others","serious","DemographyView","DEMOGRAPHY","TestedChart","tested","testedData","casesData","TestedView","s","PrefectureChart","prefecture","PrefectureView","latestPrefectureData","PREFECTURE_INFECTIONS","it","sort","b","prefectureInfections","p","getSeverity","id","code","prefectureName","PREFECTURES","find","en","infection","ranking","indexOf","JapanMap","updatedLayers","Japan","layers","l","paintedJapan","styles","japan","JapanMapLabel","mapLabel","MapView","style","top","paddingTop","paddingBottom","Home","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+i/NACAA,EAAOC,QAAU,CAAC,MAAQ,2B,i+ECA1BD,EAAOC,QAAU,CAAC,SAAW,oC,oKCDtB,SAASC,EAAeC,EAAGC,GAChC,OAAO,YACA,IAAIC,IACHF,EAAEG,KAAI,SAAAC,GAAC,MAAI,CAACH,EAAIG,GAAIA,OACtBC,UAID,SAASC,EAAcC,EAAMC,GAClC,OAASA,EAAQD,EAAQ,KAAKE,QAAQ,GAGjC,SAASC,EAAaC,GAC3B,OAAOA,EAAOC,WAAWC,QAAQ,wBAAyB,KCXrD,IAAMC,EAAsB,CACjCC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,SAAU,SAACC,GAAD,OAASA,GACnBC,UAAW,CACTC,MAAO,SAACC,EAAOC,GACb,IAAMC,EAAOF,EAAM,GAAGG,MAChBC,EAASH,EAAKI,SAASL,EAAM,GAAGM,cAAcL,KAAKD,EAAM,GAAGO,OAC5DC,EAAYP,EAAKI,SAASL,EAAM,GAAGM,cAAcL,KAAKD,EAAM,GAAGO,OAC/DE,EAASR,EAAKI,SAASL,EAAM,GAAGM,cAAcL,KAAKD,EAAM,GAAGO,OAC5DG,EAAQC,OAAOP,GAAUO,OAAOH,GAAaG,OAAOF,GAC1D,MAAM,GAAN,OAAUP,EAAV,qBAA2Bd,EAAasB,OAI9CE,MAAO,CACLlB,KAAM,QACNC,WAAW,GAEbkB,OAAQ,CACNC,SAAS,GAQXC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTH,SAAS,GAEXI,MAAO,CACLC,YAAa,EACbC,SAAU,SAAClC,EAAOqB,GAIhB,OAHoB,IAAIc,KAAKnC,GACjBoC,mBAAmB,SAExBf,EAAQ,IAAM,EAAIrB,EAAMK,QAAQ,QAAS,IAAM,IAExDgC,UAAW,aAIjBC,MAAO,CACL,CACEN,MAAO,CACLE,SAAU,SAAAlC,GAAK,OAAIE,EAAaF,IAChCqC,UAAW,WAEbE,SAAS,MAMJC,EAAyB,CACpCjC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,SAAU,SAACC,GAAD,OAASA,GACnBC,UAAW,CACTK,MAAO,SAACwB,GACN,IAKMC,GALa,IAAIhD,KACpBiD,IAAI,EAAG,UACPA,IAAI,EAAG,aACPA,IAAI,EAAG,UAEkBC,IAAIH,EAAYrB,cAC5C,MAAM,GAAN,OAAUsB,EAAV,aAAuBxC,EAAauC,EAAYzC,WAItD0B,MAAO,CACLlB,KAAM,QACNC,WAAW,GAEbkB,OAAQ,CACNC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CACL,CACES,SAAS,EACTR,UAAW,CACTH,SAAS,GAEXI,MAAO,CACLE,SAAU,SAAAlC,GAAK,OAAIE,EAAaF,IAChCqC,UAAW,aAIjBC,MAAO,CACL,CACEC,SAAS,EACTP,MAAO,CACLE,SAAU,SAAAlC,GAAK,OAAIA,GACnBqC,UAAW,eAORQ,EAAyB,CACpCtC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,SAAU,SAACC,GAAD,OAASA,GACnBC,UAAW,CACTK,MAAO,SAACwB,GACN,IAKMC,GALa,IAAIhD,KACpBiD,IAAI,EAAG,YACPA,IAAI,EAAG,WACPA,IAAI,EAAG,UAEkBC,IAAIH,EAAYrB,cAC5C,MAAM,GAAN,OAAUsB,EAAV,aAAuBxC,EAAauC,EAAYzC,WAItD0B,MAAO,CACLlB,KAAM,QACNC,WAAW,GAEbkB,OAAQ,CACNC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CACL,CACES,SAAS,EACTR,UAAW,CACTH,SAAS,GAEXI,MAAO,CACLE,SAAU,SAAAlC,GAAK,OAAIE,EAAaF,IAChCqC,UAAW,aAIjBC,MAAO,CACL,CACEC,SAAS,EACTP,MAAO,CACLE,SAAU,SAAAlC,GAAK,OAAIA,GACnBqC,UAAW,eAORS,EAAqB,CAChCvC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,SAAU,SAACC,GAAD,OAASA,GACnBC,UAAW,CACTK,MAAO,SAACwB,GACR,IAIMC,GAJa,IAAIhD,KACpBiD,IAAI,EAAG,YACPA,IAAI,EAAG,UAEkBC,IAAIH,EAAYrB,cAC5C,MAAM,GAAN,OAAUsB,EAAV,aAAuBxC,EAAauC,EAAYzC,WAIpD0B,MAAO,CACLlB,KAAM,QACNC,WAAW,GAEbkB,OAAQ,CACNC,SAAS,GAQXC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTH,SAAS,GAEXI,MAAO,CACLC,YAAa,EACbC,SAAU,SAAClC,EAAOqB,GAIhB,OAHoB,IAAIc,KAAKnC,GACjBoC,mBAAmB,SAExBf,EAAQ,IAAM,EAAIrB,EAAMK,QAAQ,QAAS,IAAM,IAExDgC,UAAW,aAIjBC,MAAO,CACL,CACEN,MAAO,CACLE,SAAU,SAAAlC,GAAK,OAAIE,EAAaF,IAChCqC,UAAW,eC1JNU,MApDf,YAAqC,IAAbC,EAAY,EAAZA,SAChBC,EAAcD,EAASzB,OACvB2B,EAAiBF,EAAS1B,UAC1B6B,EAAcH,EAAS9B,OAEvBkC,EAAWC,IAAMC,OAAO,MAwC9B,OAtCAD,IAAME,WAAU,WACd,IAAMC,EAAaJ,EAASK,QAAQC,WAAW,MAE/C,IAAIC,IAAMH,EAAY,CACpBI,KAAM,OACN7C,KAAM,CACJ8C,OAAO,YAAKZ,EAAYtD,KAAI,SAAAmE,GAAC,OAAIA,EAAE7C,UACnCE,SAAU,CACR,CACEF,MAAO,SACP8C,gBAAiB,yBACjBC,YAAa,yBACbC,YAAa,EACbC,UAAW,EACXnD,KAAMoC,EAAYxD,KAAI,SAAAmE,GAAC,OAAIA,EAAE9D,UAE/B,CACEiB,MAAO,YACP8C,gBAAiB,yBACjBC,YAAa,yBACbC,YAAa,EACbC,UAAW,EACXnD,KAAMmC,EAAevD,KAAI,SAAAmE,GAAC,OAAIA,EAAE9D,UAElC,CACEiB,MAAO,SACP8C,gBAAiB,yBACjBC,YAAa,yBACbC,YAAa,EACbC,UAAW,EACXnD,KAAMkC,EAAYtD,KAAI,SAAAmE,GAAC,OAAIA,EAAE9D,YAInCmE,QAAS7D,OAKX,6BACE,4BAAQ8D,OAAO,QAAQC,IAAKjB,M,OCJnBkB,MA3Cf,WACE,IAAM9C,EAAQ+C,EAAa5E,KAAI,SAAA6E,GAC7B,MAAO,CACLvD,MAAOuD,EAAQxD,KACfhB,MAAOwE,EAAQzD,KAAKS,UAIlBF,EAAYiD,EAAa5E,KAAI,SAAA6E,GACjC,MAAO,CACLvD,MAAOuD,EAAQxD,KACfhB,MAAOwE,EAAQzD,KAAKO,cAIlBJ,EAASqD,EAAa5E,KAAI,SAAA6E,GAC9B,MAAO,CACLvD,MAAOuD,EAAQxD,KACfhB,MAAOwE,EAAQzD,KAAKG,WAWlB8B,EAAW,CACfxB,MAAOA,EACPD,OATagD,EAAa5E,KAAI,SAAA6E,GAC9B,MAAO,CACLvD,MAAOuD,EAAQxD,KACfhB,MAAOwE,EAAQzD,KAAKQ,WAOtBD,UAAWA,EACXJ,OAASA,GAGX,OACE,6BAASuD,UAAU,QACjB,kBAAC,EAAD,CAAczB,SAAUA,MCvCxB0B,GAAiB,IAAIhF,KACxBiD,IAAI,QAAS,gBACbA,IAAI,SAAU,mBACdA,IAAI,YAAa,kBACjBA,IAAI,SAAU,gBAEjB,SAASgC,EAASlF,GAChB,OAAOiF,EAAe9B,IAAInD,GAmBbmF,MAhBf,YAA4C,IAAnBJ,EAAkB,EAAlBA,QAAShD,EAAS,EAATA,MAC1BqD,EAAa/E,EAAc0B,EAAOgD,EAAQxE,OAEhD,OACE,6BAASyE,UAAU,8CACjB,0BAAMA,UAAU,gDACbD,EAAQ/E,KAEX,6BACE,0BAAMgF,UAAS,gDAA2CE,EAASH,EAAQ/E,OAASS,EAAasE,EAAQxE,QACzF,WAAf6E,EAA0B,0BAAMJ,UAAS,mCAA8BE,EAASH,EAAQ/E,OAA9D,IAAwEK,EAAc0B,EAAOgD,EAAQxE,OAArG,MAAwH,QCF5I8E,MAlBf,YAAgC,IAAVC,EAAS,EAATA,MACdC,EAAYC,OAAOC,QAAQH,GAC9BpF,KAAI,SAAAgB,GACH,MAAO,CACLlB,IAAKkB,EAAI,GACTX,MAAOW,EAAI,OAIjB,OACE,yBAAK8D,UAAU,4CACZO,EAAUrF,KAAI,SAAA6E,GAAO,OACpB,kBAAC,EAAD,CAAeA,QAASA,EAAS/E,IAAK+E,EAAQ/E,IAAK+B,MAAOuD,EAAMvD,aCIzD2D,MAff,WACE,IAAMJ,EAAQ,CACZvD,MAAO+C,EAAaA,EAAaa,OAAS,GAAGrE,KAAKS,MAClDD,OAAQgD,EAAaA,EAAaa,OAAS,GAAGrE,KAAKQ,OACnDD,UAAWiD,EAAaA,EAAaa,OAAS,GAAGrE,KAAKO,UACtDJ,OAASqD,EAAaA,EAAaa,OAAS,GAAGrE,KAAKG,QAGtD,OACE,6BAASuD,UAAU,QACjB,kBAAC,EAAD,CAAYM,MAAOA,MCoCVM,MA9Cf,YAA0C,IAAfC,EAAc,EAAdA,WACnBlC,EAAWC,IAAMC,OAAO,MAExBiC,EAAcD,EAAW3F,KAAI,SAAA6F,GAAC,OAAIA,EAAEC,cAEpCvE,EAASoE,EAAW3F,KAAI,SAAA6F,GAAC,OAAIA,EAAEtE,UAC/BwE,EAAWJ,EAAW3F,KAAI,SAAA6F,GAAC,OAAIA,EAAEG,UACjCC,EAAUN,EAAW3F,KAAI,SAAA6F,GAAC,OAAIA,EAAEI,WAgCtC,OA9BAvC,IAAME,WAAU,WACd,IAAMC,EAAaJ,EAASK,QAAQC,WAAW,MAE/C,IAAIC,IAAMH,EAAY,CACpBI,KAAM,gBACN7C,KAAM,CACJ8C,OAAQ0B,EACRpE,SAAU,CACR,CACEF,MAAO,WACP8C,gBAAiB,yBACjBhD,KAAM2E,GAER,CACEzE,MAAO,UACP8C,gBAAiB,yBACjBhD,KAAM6E,GAER,CACE3E,MAAO,SACP8C,gBAAiB,uBACjBhD,KAAMG,KAIZiD,QAAStB,OAMX,6BACE,4BAAQuB,OAAO,QAAQC,IAAKjB,M,OC9BnByC,MAXf,WACE,OACE,6BAASpB,UAAU,QACjB,wBAAIA,UAAU,gCAAd,cACA,kBAAC,EAAD,CAAiBa,WAAYQ,IAC7B,uBAAGrB,UAAU,8BAAb,yJCwCSsB,MA7Cf,YAAyC,IAAlBC,EAAiB,EAAjBA,OAAQxE,EAAS,EAATA,MACvBqC,EAASmC,EAAOrG,KAAI,SAAAmE,GAAC,OAAIA,EAAE9C,QAC3BiF,EAAaD,EAAOrG,KAAI,SAAAmE,GAAC,OAAIA,EAAEkC,UAC/BE,EAAY1E,EAAM7B,KAAI,SAAAmE,GAAC,OAAIA,EAAEtC,SAE7B4B,EAAWC,IAAMC,OAAO,MAiC9B,OA/BAD,IAAME,WAAU,WACd,IAAMC,EAAaJ,EAASK,QAAQC,WAAW,MAE/C,IAAIC,IAAMH,EAAY,CACpBI,KAAM,MACN7C,KAAM,CACJ8C,OAAQA,EACR1C,SAAU,CACR,CACEF,MAAO,WACP8C,gBAAiB,yBACjBC,YAAa,yBACbC,YAAa,EACbC,UAAW,EACXnD,KAAMmF,GAER,CACEjF,MAAO,aACP8C,gBAAiB,yBACjBC,YAAa,yBACbC,YAAa,EACbC,UAAW,EACXnD,KAAMkF,KAKZ9B,QAASrB,OAKX,6BACE,4BAAQsB,OAAO,QAAQC,IAAKjB,MChBnB+C,MAxBf,WACE,IAAMH,EAASzB,EAAa5E,KAAI,SAAAyG,GAC9B,MAAO,CACLpF,KAAMoF,EAAEpF,KACRgF,OAAQI,EAAErF,KAAKiF,WAIbxE,EAAQ+C,EAAa5E,KAAI,SAAAyG,GAC7B,MAAO,CACLpF,KAAMoF,EAAEpF,KACRQ,MAAO4E,EAAErF,KAAKS,UAIlB,OACE,6BAASiD,UAAU,QACjB,wBAAIA,UAAU,gCAAd,SACA,kBAAC,EAAD,CAAauB,OAAQA,EAAQxE,MAAOA,IACpC,uBAAGiD,UAAU,8BAAb,iJCyBS4B,MA5Cf,YAA0C,IAAfC,EAAc,EAAdA,WACnBlD,EAAWC,IAAMC,OAAO,MAExBiC,EAAce,EAAW3G,KAAI,SAAA6F,GAAC,OAAIA,EAAEzE,KAAKuF,cACzC/E,EAAS+E,EAAW3G,KAAI,SAAA6F,GAAC,OAAIA,EAAEzE,KAAKQ,UACpCD,EAAYgF,EAAW3G,KAAI,SAAA6F,GAAC,OAAIA,EAAEzE,KAAKO,aACvCJ,EAASoF,EAAW3G,KAAI,SAAA6F,GAAC,OAAIA,EAAEzE,KAAKG,UA+B1C,OA7BAmC,IAAME,WAAU,WACd,IAAMC,EAAaJ,EAASK,QAAQC,WAAW,MAE/C,IAAIC,IAAMH,EAAY,CACpBI,KAAM,gBACN7C,KAAM,CACJ8C,OAAQ0B,EACRpE,SAAU,CACR,CACEF,MAAO,SACP8C,gBAAiB,yBACjBhD,KAAMQ,GAER,CACEN,MAAO,YACP8C,gBAAiB,yBACjBhD,KAAMO,GAER,CACEL,MAAO,SACP8C,gBAAiB,yBACjBhD,KAAMG,KAIZiD,QAAS3B,OAKX,6BACE,4BAAQ4B,OAAO,QAAQC,IAAKjB,M,OC1BnBmD,MAZf,WACE,IAAMC,EAAuBjH,EAAekH,GAAuB,SAAAC,GAAE,OAAIA,EAAG3F,KAAKuF,cAC9EK,MAAK,SAACnH,EAAGoH,GAAJ,OAAUA,EAAE7F,KAAKS,MAAQhC,EAAEuB,KAAKS,SAExC,OACE,6BAASiD,UAAU,QACjB,wBAAIA,UAAU,gCAAd,eACA,kBAAC,EAAD,CAAiB6B,WAAYE,M,+CCJ7BK,EAAuBtH,EAAekH,GAAuB,SAAAC,GAAE,OAAIA,EAAG3F,KAAKuF,cAC9EK,MAAK,SAACnH,EAAGoH,GAAJ,OAAUA,EAAE7F,KAAKS,MAAQhC,EAAEuB,KAAKS,SACrC7B,KAAI,SAAAmH,GACH,MAAO,CACLR,WAAYQ,EAAE/F,KAAKuF,WACnB9E,MAAOsF,EAAE/F,KAAKS,UAIpB,SAASuF,EAAYC,GACnB,IAAMC,EAAOD,EAAG3G,QAAQ,MAAO,IACzB6G,EAAiBC,EAAYC,MAAK,SAAAN,GAAC,OAAIrF,OAAOqF,EAAEG,QAAUxF,OAAOwF,MAAOI,GACxEC,EAAYT,EAAqBO,MAAK,SAAAN,GAAC,OAAIA,EAAER,aAAeY,KAElE,GAAgC,IAA5BzF,OAAO6F,EAAU9F,OACnB,MAAO,GAGT,IAAM+F,EAAUV,EAAqBW,QAAQF,GAAa,EAE1D,OAAIC,GAAW,GACN,MAGLA,GAAW,GACN,MAGLA,GAAW,GACN,QAGLA,GAAW,GACN,OAGF,OAuBME,MApBf,WACE,IAAMC,EAAgBC,EAAMC,OAAOjI,KAAI,SAAAkI,GACrC,OAAO,eACFA,EADL,CAEE,gBAAiBd,EAAYc,EAAEb,SAI7Bc,EAAY,eACbH,EADa,CAEhBC,OAAQF,IAGV,OACE,yBAAKjD,UAAWsD,IAAOC,OACrB,kBAAC,YAAcF,K,iBCvBNG,MApCf,WACE,OACE,yBAAKxD,UAAS,UAAKsD,IAAOG,SAAZ,mBACZ,yBAAKzD,UAAU,qBACb,yBAAKA,UAAU,uCACf,0BAAMA,UAAU,yBAAhB,yBAGF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,uCACf,0BAAMA,UAAU,yBAAhB,4BAGF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,0CACf,0BAAMA,UAAU,yBAAhB,4BAGF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,0CACf,0BAAMA,UAAU,yBAAhB,4BAGF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,0CACf,0BAAMA,UAAU,yBAAhB,0BAGF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,wCACf,0BAAMA,UAAU,yBAAhB,eCdO0D,MAff,WAOE,OACE,yBAAK1D,UAAU,SAAS2D,MAPZ,CACZC,IAAK,OACLC,WAAY,OACZC,cAAe,SAKb,kBAAC,EAAD,MACA,kBAAC,EAAD,QC4BSC,MAlCf,WACE,OACE,0BAAM/D,UAAU,qCACd,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,yCAAd,yBACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,2BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,kBACb,kBAAC,EAAD,QAIJ,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,2BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,kBACb,kBAAC,EAAD,QAIJ,0BAAMA,UAAU,yBAAhB,WACU,uBAAGA,UAAU,YAAYgE,KAAK,oBAAoBC,OAAO,SAASC,IAAI,uBAAtE,MADV,QCzBOC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52781cc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"japan\":\"japan-map_japan__3XM7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapLabel\":\"japan-map-label_mapLabel__lCrgx\"};","export function uniqByKeepLast(a, key) {\r\n  return [\r\n      ...new Map(\r\n          a.map(x => [key(x), x])\r\n      ).values()\r\n  ]\r\n}\r\n\r\nexport function getPercentage(base, value) {\r\n  return ((value / base) * 100).toFixed(2)\r\n}\r\n\r\nexport function formatNumber(number) {\r\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n}","import { formatNumber } from 'utils/helpers'\r\n\r\nexport const summaryChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      title: (items, data) => {\r\n        const date = items[2].label\r\n        const deaths = data.datasets[items[0].datasetIndex].data[items[0].index]\r\n        const recovered = data.datasets[items[1].datasetIndex].data[items[0].index]\r\n        const active = data.datasets[items[2].datasetIndex].data[items[0].index]\r\n        const cases = Number(deaths) + Number(recovered) + Number(active)\r\n        return `${date} - Cases: ${formatNumber(cases)}`\r\n      },\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false,\r\n    // onHover: (e) => {\r\n    //    e.target.style.cursor = 'pointer'\r\n    // },\r\n    // labels: {\r\n    //   fontColor: '#f7fafc',\r\n    // },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          maxRotation: 0,\r\n          callback: (value, index) => {\r\n            const currentDate = new Date(value)\r\n            currentDate.toLocaleDateString('en-US')\r\n\r\n            return index % 2 !== 1 ? value.replace('2020/', '') : ''\r\n          },\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n        stacked: true,\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nexport const prefectureChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem) => {\r\n        const categories = new Map()\r\n          .set(0, 'Active')\r\n          .set(1, 'Recovered')\r\n          .set(2, 'Deaths')\r\n\r\n        const category = categories.get(tooltipItem.datasetIndex)\r\n        return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        stacked: true,\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        stacked: true,\r\n        ticks: {\r\n          callback: value => value,\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nexport const demographyChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem) => {\r\n        const categories = new Map()\r\n          .set(0, 'Infected')\r\n          .set(1, 'Serious')\r\n          .set(2, 'Deaths')\r\n\r\n        const category = categories.get(tooltipItem.datasetIndex)\r\n        return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        stacked: true,\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        stacked: true,\r\n        ticks: {\r\n          callback: value => value,\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nexport const testedChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem)=> {\r\n      const categories = new Map()\r\n        .set(0, 'Positive')\r\n        .set(1, 'Tested')\r\n\r\n      const category = categories.get(tooltipItem.datasetIndex)\r\n      return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false,\r\n    // onHover: (e) => {\r\n    //    e.target.style.cursor = 'pointer'\r\n    // },\r\n    // labels: {\r\n    //   fontColor: '#f7fafc',\r\n    // },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          maxRotation: 0,\r\n          callback: (value, index) => {\r\n            const currentDate = new Date(value)\r\n            currentDate.toLocaleDateString('en-US')\r\n\r\n            return index % 2 !== 1 ? value.replace('2020/', '') : ''\r\n          },\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { summaryChartOptions } from 'constants/chart-options'\r\n\r\nfunction SummaryChart({ timeline }) {\r\n  const japanActive = timeline.active\r\n  const japanRecovered = timeline.recovered\r\n  const japanDeaths = timeline.deaths\r\n\r\n  const chartRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'line',\r\n      data: {\r\n        labels: [...japanActive.map(t => t.label)],\r\n        datasets: [\r\n          {\r\n            label: 'Deaths',\r\n            backgroundColor: 'rgba(245, 101, 101, 1)',\r\n            borderColor: 'rgba(245, 101, 101, 1)',\r\n            pointRadius: 1,\r\n            hitRadius: 5,\r\n            data: japanDeaths.map(t => t.value),\r\n          },\r\n          {\r\n            label: 'Recovered',\r\n            backgroundColor: 'rgba(154, 230, 180, 1)',\r\n            borderColor: 'rgba(154, 230, 180, 1)',\r\n            pointRadius: 1,\r\n            hitRadius: 5,\r\n            data: japanRecovered.map(t => t.value),\r\n          },\r\n          {\r\n            label: 'Active',\r\n            backgroundColor: 'rgba(251, 211, 141, 1)',\r\n            borderColor: 'rgba(251, 211, 141, 1)',\r\n            pointRadius: 1,\r\n            hitRadius: 5,\r\n            data: japanActive.map(t => t.value),\r\n          },\r\n        ],\r\n      },\r\n      options: summaryChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"225px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SummaryChart\r\n","import React from 'react'\r\nimport SummaryChart from 'components/SummaryChart'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction SummaryView() {\r\n  const cases = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.cases\r\n    }\r\n  })\r\n\r\n  const recovered = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.recovered\r\n    }\r\n  })\r\n\r\n  const deaths = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.deaths\r\n    }\r\n  })\r\n\r\n  const active = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.active\r\n    }\r\n  })\r\n\r\n  const timeline = {\r\n    cases: cases,\r\n    active: active,\r\n    recovered: recovered,\r\n    deaths:  deaths\r\n  }\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <SummaryChart timeline={timeline} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SummaryView\r\n","import React from 'react'\r\nimport { getPercentage, formatNumber } from 'utils/helpers'\r\n\r\nconst SUMMARY_COLORS = new Map()\r\n  .set('cases', 'text-red-200')\r\n  .set('active', 'text-orange-300')\r\n  .set('recovered', 'text-green-300')\r\n  .set('deaths', 'text-red-500')\r\n\r\nfunction getColor(key) {\r\n  return SUMMARY_COLORS.get(key)\r\n}\r\n\r\nfunction NumberSummary({ summary, cases }) {\r\n  const percentage = getPercentage(cases, summary.value)\r\n\r\n  return (\r\n    <article className=\"flex flex-col mt-4 mr-4 lg:mr-12 last:mr-0\">\r\n      <span className=\"uppercase text-sm font-medium tracking-wider\">\r\n        {summary.key}\r\n      </span>\r\n      <div>\r\n        <span className={`tracking-tighter text-2xl lg:text-3xl ${getColor(summary.key)}`}>{formatNumber(summary.value)}</span>\r\n        {percentage !== '100.00' ? <span className={`ml-2 text-sm font-medium ${getColor(summary.key)}`}>({getPercentage(cases, summary.value)}%)</span> : null} \r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default NumberSummary\r\n","import React from 'react'\r\nimport NumberSummary from 'components/NumberSummary'\r\n\r\nfunction TopNumbers({ total }) {\r\n  const summaries = Object.entries(total)\r\n    .map(arr => {\r\n      return {\r\n        key: arr[0],\r\n        value: arr[1]\r\n      }\r\n    })\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap justify-center mb-6 -mt-4\">\r\n      {summaries.map(summary => (\r\n        <NumberSummary summary={summary} key={summary.key} cases={total.cases} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopNumbers\r\n","import React from 'react'\r\nimport TopNumbers from 'components/TopNumbers'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction TitleView() {\r\n  const total = {\r\n    cases: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.cases,\r\n    active: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.active,\r\n    recovered: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.recovered,\r\n    deaths:  SUMMARY_DATA[SUMMARY_DATA.length - 1].data.deaths\r\n  }\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <TopNumbers total={total} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default TitleView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { demographyChartOptions } from 'constants/chart-options'\r\n\r\nfunction DemographyChart({ demography }) {\r\n  const chartRef = React.useRef(null)\r\n\r\n  const chartLabels = demography.map(d => d.generation)\r\n\r\n  const deaths = demography.map(d => d.deaths)\r\n  const infected = demography.map(d => d.others)\r\n  const serious = demography.map(d => d.serious)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'horizontalBar',\r\n      data: {\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            label: 'infected',\r\n            backgroundColor: 'rgba(254, 215, 215, 1)',\r\n            data: infected,\r\n          },\r\n          {\r\n            label: 'serious',\r\n            backgroundColor: 'rgba(252, 129, 129, 1)',\r\n            data: serious,\r\n          },\r\n          {\r\n            label: 'deaths',\r\n            backgroundColor: 'rgba(229, 62, 62, 1)',\r\n            data: deaths,\r\n          },\r\n        ],\r\n      },\r\n      options: demographyChartOptions,\r\n    })\r\n  })\r\n\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"150px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DemographyChart\r\n","import React from 'react'\r\nimport DemographyChart from 'components/DemographyChart'\r\nimport DEMOGRAPHY from 'data/demography.json'\r\n\r\nfunction DemographyView() {\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-6\">Demography</h3>\r\n      <DemographyChart demography={DEMOGRAPHY}/>\r\n      <p className=\"text-xs text-gray-500 mt-6\">\r\n        \"Unknown\" includes undisclosed or under confirmation. This data has different publication date from MHLW so it may be inconsistent with other data.</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default DemographyView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { testedChartOptions } from 'constants/chart-options'\r\n\r\nfunction TestedChart({ tested, cases }) {\r\n  const labels = tested.map(t => t.date)\r\n  const testedData = tested.map(t => t.tested)\r\n  const casesData = cases.map(t => t.cases)\r\n\r\n  const chartRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'Positive',\r\n            backgroundColor: 'rgba(254, 215, 215, 1)',\r\n            borderColor: 'rgba(254, 215, 215, 1)',\r\n            pointRadius: 1,\r\n            hitRadius: 5,\r\n            data: casesData,\r\n          },\r\n          {\r\n            label: 'PCR Tested',\r\n            backgroundColor: 'rgba(226, 232, 240, 1)',\r\n            borderColor: 'rgba(226, 232, 240, 1)',\r\n            pointRadius: 1,\r\n            hitRadius: 5,\r\n            data: testedData,\r\n          },\r\n\r\n        ],\r\n      },\r\n      options: testedChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"150px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestedChart\r\n","import React from 'react'\r\nimport TestedChart from 'components/TestedChart'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction TestedView() {\r\n  const tested = SUMMARY_DATA.map(s => {\r\n    return {\r\n      date: s.date,\r\n      tested: s.data.tested\r\n    }\r\n  })\r\n\r\n  const cases = SUMMARY_DATA.map(s => {\r\n    return {\r\n      date: s.date,\r\n      cases: s.data.cases\r\n    }\r\n  })\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-6\">Tests</h3>\r\n      <TestedChart tested={tested} cases={cases}/>\r\n      <p className=\"text-xs text-gray-500 mt-6\">Testing is done via PCR which can be inaccurate so multiple tests are done on a single person which only counts as one record in this data.</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default TestedView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { prefectureChartOptions } from 'constants/chart-options'\r\n\r\nfunction PrefectureChart({ prefecture }) {\r\n  const chartRef = React.useRef(null)\r\n\r\n  const chartLabels = prefecture.map(d => d.data.prefecture)\r\n  const active = prefecture.map(d => d.data.active)\r\n  const recovered = prefecture.map(d => d.data.recovered)\r\n  const deaths = prefecture.map(d => d.data.deaths)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'horizontalBar',\r\n      data: {\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            label: 'Active',\r\n            backgroundColor: 'rgba(251, 211, 141, 1)',\r\n            data: active,\r\n          },\r\n          {\r\n            label: 'Recovered',\r\n            backgroundColor: 'rgba(154, 230, 180, 1)',\r\n            data: recovered,\r\n          },\r\n          {\r\n            label: 'Deaths',\r\n            backgroundColor: 'rgba(245, 101, 101, 1)',\r\n            data: deaths,\r\n          },\r\n        ],\r\n      },\r\n      options: prefectureChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"500px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PrefectureChart\r\n","import React from 'react'\r\nimport PrefectureChart from 'components/PrefectureChart'\r\nimport PREFECTURE_INFECTIONS from 'data/prefecture-infections.json'\r\nimport { uniqByKeepLast } from 'utils/helpers'\r\n\r\nfunction PrefectureView() {\r\n  const latestPrefectureData = uniqByKeepLast(PREFECTURE_INFECTIONS, it => it.data.prefecture)\r\n    .sort((a, b) => b.data.cases - a.data.cases)\r\n  \r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-2\">Prefectures</h3>\r\n      <PrefectureChart prefecture={latestPrefectureData} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PrefectureView\r\n","import React from 'react'\r\nimport { VectorMap } from '@south-paw/react-vector-maps'\r\nimport Japan from 'constants/japan-vector-map.json'\r\nimport styles from './japan-map.module.css'\r\nimport PREFECTURES from 'constants/prefectures.json'\r\nimport PREFECTURE_INFECTIONS from 'data/prefecture-infections.json'\r\nimport { uniqByKeepLast } from 'utils/helpers'\r\n\r\nconst prefectureInfections = uniqByKeepLast(PREFECTURE_INFECTIONS, it => it.data.prefecture)\r\n  .sort((a, b) => b.data.cases - a.data.cases)\r\n  .map(p => {\r\n    return {\r\n      prefecture: p.data.prefecture,\r\n      cases: p.data.cases\r\n    }\r\n  })\r\n\r\nfunction getSeverity(id) {\r\n  const code = id.replace('jp-', '')\r\n  const prefectureName = PREFECTURES.find(p => Number(p.code) === Number(code)).en\r\n  const infection = prefectureInfections.find(p => p.prefecture === prefectureName)\r\n\r\n  if (Number(infection.cases) === 0) {\r\n    return ''\r\n  }\r\n\r\n  const ranking = prefectureInfections.indexOf(infection) + 1\r\n\r\n  if (ranking <= 10) {\r\n    return 'one'\r\n  }\r\n\r\n  if (ranking <= 20) {\r\n    return 'two'\r\n  }\r\n  \r\n  if (ranking <= 30) {\r\n    return 'three'\r\n  }\r\n  \r\n  if (ranking <= 40) {\r\n    return 'four'\r\n  }\r\n\r\n  return 'five'\r\n}\r\n\r\nfunction JapanMap() {\r\n  const updatedLayers = Japan.layers.map(l => {\r\n    return {\r\n      ...l,\r\n      'data-severity': getSeverity(l.id)\r\n    }\r\n  })\r\n\r\n  const paintedJapan = {\r\n    ...Japan,\r\n    layers: updatedLayers\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.japan}>\r\n      <VectorMap {...paintedJapan} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JapanMap\r\n","import React from 'react'\r\nimport styles from './japan-map-label.module.css'\r\n\r\nfunction JapanMapLabel() {\r\n  return (\r\n    <div className={`${styles.mapLabel} flex flex-col`}>\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-red-600 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 10 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-red-400 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 11-20 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-orange-400 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 21-30 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-orange-300 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 31-40 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-orange-200 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 41+ in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-gray-600 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">no cases</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JapanMapLabel\r\n","import React from 'react'\r\nimport JapanMap from 'components/JapanMap'\r\nimport JapanMapLabel from 'components/JapanMapLabel'\r\n\r\nfunction MapView() {\r\n  const style = {\r\n    top: '6rem',\r\n    paddingTop: '2rem',\r\n    paddingBottom: '2rem'\r\n  }\r\n\r\n  return (\r\n    <div className=\"sticky\" style={style}>\r\n      <JapanMap />  \r\n      <JapanMapLabel />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapView\r\n","import React from 'react'\r\nimport SummaryView from 'views/SummaryView'\r\nimport TitleView from 'views/TitleView'\r\nimport DemographyView from 'views/DemographyView'\r\nimport TestedView from 'views/TestedView'\r\nimport PrefectureView from 'views/PrefectureView'\r\nimport MapView from 'views/MapView'\r\n\r\nfunction Home() {\r\n  return (\r\n    <main className=\"bg-gray-800 text-gray-200 text-lg\">\r\n      <div className=\"container mx-auto p-4\">\r\n        <h1 className=\"font-medium text-3xl mb-6 text-center\">Japan COVID-19 Status</h1>\r\n        <TitleView />\r\n\r\n        <div className=\"mb-6 flex flex-col lg:flex-row\">\r\n          <div className=\"w-100 lg:w-1/2 lg:mr-24\">\r\n            <SummaryView />\r\n            <PrefectureView />\r\n          </div>\r\n          <div className=\"w-100 lg:w-1/2\">\r\n            <MapView />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-6 flex flex-col lg:flex-row\">\r\n          <div className=\"w-100 lg:w-1/2 lg:mr-12\">\r\n            <DemographyView />\r\n          </div>\r\n          <div className=\"w-100 lg:w-1/2\">\r\n            <TestedView />\r\n          </div>\r\n        </div>\r\n\r\n        <span className=\"text-xs text-gray-500\">\r\n          Made by <a className=\"underline\" href=\"https://tkmi.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">me</a>.\r\n        </span>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <Home />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './assets/styles/tailwind.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}