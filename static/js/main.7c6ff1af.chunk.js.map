{"version":3,"sources":["components/japan-map.module.css","components/japan-map-label.module.css","utils/helpers.js","components/SummaryChart.js","views/SummaryView.js","components/NumberSummary.js","components/TopNumbers.js","views/TitleView.js","components/DemographyChart.js","views/DemographyView.js","components/TestedChart.js","views/TestedView.js","components/PrefectureChart.js","views/PrefectureView.js","components/JapanMap.js","components/JapanMapLabel.js","views/MapView.js","components/SymptomsChart.js","views/SymptomsView.js","components/TimelineChart.js","components/TimelineInfo.js","views/TimelineView.js","views/ThanksView.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uniqByKeepLast","a","key","Map","map","x","values","formatNumber","number","toString","replace","SummaryChart","timeline","japanActive","active","japanNew","new","japanRecovered","recovered","japanDeaths","deaths","summaryChartOptions","tooltips","mode","intersect","itemSort","arr","callbacks","title","items","data","date","label","datasets","datasetIndex","index","newCases","cases","Number","tooltipItem","category","set","get","value","hover","legend","display","scales","xAxes","gridLines","ticks","maxRotation","callback","dataSet","fontColor","yAxes","stacked","chartRef","React","useRef","useEffect","contextRef","current","getContext","Chart","type","labels","t","backgroundColor","borderColor","pointRadius","hitRadius","options","height","ref","SummaryView","SUMMARY_DATA","summary","className","SUMMARY_COLORS","getColor","NumberSummary","base","toFixed","TopNumbers","total","summaries","Object","entries","TitleView","length","demographyChartOptions","DemographyChart","demography","chartLabels","d","generation","infected","others","serious","DemographyView","DEMOGRAPHY","testedChartOptions","TestedChart","tested","testedPositive","TestedView","s","prefectureChartOptions","PrefectureChart","prefecture","PrefectureView","latestPrefectureData","PREFECTURE_INFECTIONS","it","sort","b","prefectureInfections","p","getSeverity","id","code","prefectureName","PREFECTURES","find","en","infection","ranking","indexOf","JapanMap","updatedLayers","Japan","layers","l","paintedJapan","styles","japan","JapanMapLabel","mapLabel","MapView","style","top","paddingTop","paddingBottom","symptomsChartOptions","SymptomsChart","symptoms","asymptomatic","symptomatic","SymptomsView","cases_with_symptoms","TimelineChart","events","updateFeatured","timelineChartOptions","event","TIMELINE","eventData","e","hasEvent","val","hoverRadius","TimelineReader","dateString","Date","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","toShortDate","desc","TimelineView","useState","featured","c","TimelineInfo","ThanksView","author","link","source","href","target","rel","Home","name","content","property","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c6ff1af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"japan\":\"japan-map_japan__3XM7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapLabel\":\"japan-map-label_mapLabel__lCrgx\"};","export function uniqByKeepLast(a, key) {\r\n  return [\r\n      ...new Map(\r\n          a.map(x => [key(x), x])\r\n      ).values()\r\n  ]\r\n}\r\n\r\nexport function getPercentage(base, value) {\r\n  return ((value / base) * 100).toFixed(2)\r\n}\r\n\r\nexport function formatNumber(number) {\r\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n}","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { formatNumber } from 'utils/helpers'\r\n\r\nfunction SummaryChart({ timeline }) {\r\n  const japanActive = timeline.active\r\n  const japanNew = timeline.new\r\n  const japanRecovered = timeline.recovered\r\n  const japanDeaths = timeline.deaths\r\n\r\n  const summaryChartOptions = {\r\n    tooltips: {\r\n      mode: 'index',\r\n      intersect: false,\r\n      itemSort: (arr) => arr,\r\n      callbacks: {\r\n        title: (items, data) => {\r\n          const date = items[2].label\r\n          const deaths = data.datasets[items[0].datasetIndex].data[items[0].index]\r\n          const recovered = data.datasets[items[1].datasetIndex].data[items[0].index]\r\n          const active = data.datasets[items[2].datasetIndex].data[items[0].index]\r\n          const newCases = data.datasets[items[3].datasetIndex].data[items[0].index]\r\n          const cases = Number(deaths) + Number(recovered) + Number(active) + Number(newCases)\r\n  \r\n          return `${date} - Cases: ${formatNumber(cases)}`\r\n        },\r\n        label: (tooltipItem) => {\r\n          const categories = new Map()\r\n            .set(0, 'Deaths')\r\n            .set(1, 'Recovered')\r\n            .set(2, 'Active')\r\n            .set(3, 'New')\r\n  \r\n          const category = categories.get(tooltipItem.datasetIndex)\r\n          return `${category}: ${formatNumber(tooltipItem.value)}`\r\n        }\r\n      }\r\n    },\r\n    hover: {\r\n      mode: 'index',\r\n      intersect: false,\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            maxRotation: 0,\r\n            callback: (value, index, dataSet) => {\r\n              const shouldShow = index === 0 || index % 2 === 0\r\n              return shouldShow ? value.replace('2020/', '') : ''\r\n            },\r\n            fontColor: '#a0aec0'\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            callback: value => formatNumber(value),\r\n            fontColor: '#a0aec0'\r\n          },\r\n          stacked: true\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const chartRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'line',\r\n      data: {\r\n        labels: [...japanActive.map(t => t.label)],\r\n        datasets: [\r\n          {\r\n            label: 'Deaths',\r\n            backgroundColor: 'rgba(245, 101, 101, 1)',\r\n            borderColor: 'rgba(245, 101, 101, 1)',\r\n            pointRadius: 0,\r\n            hitRadius: 5,\r\n            data: japanDeaths.map(t => t.value),\r\n          },\r\n          {\r\n            label: 'Recovered',\r\n            backgroundColor: 'rgba(154, 230, 180, 1)',\r\n            borderColor: 'rgba(154, 230, 180, 1)',\r\n            pointRadius: 0,\r\n            hitRadius: 5,\r\n            data: japanRecovered.map(t => t.value),\r\n          },\r\n          {\r\n            label: 'Active',\r\n            backgroundColor: 'rgba(251, 211, 141, 1)',\r\n            borderColor: 'rgba(251, 211, 141, 1)',\r\n            pointRadius: 0,\r\n            hitRadius: 5,\r\n            data: japanActive.map(t => t.value),\r\n          },\r\n          {\r\n            label: 'New',\r\n            backgroundColor: '#ed8936',\r\n            borderColor: '#ed8936',\r\n            pointRadius: 0,\r\n            hitRadius: 5,\r\n            data: japanNew.map(t => t.value),\r\n          },\r\n        ],\r\n      },\r\n      options: summaryChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"225px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SummaryChart\r\n","import React from 'react'\r\nimport SummaryChart from 'components/SummaryChart'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction SummaryView() {\r\n  const cases = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.cases\r\n    }\r\n  })\r\n\r\n  const recovered = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.recovered\r\n    }\r\n  })\r\n\r\n  const deaths = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.deaths\r\n    }\r\n  })\r\n\r\n  const active = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.active\r\n    }\r\n  })\r\n\r\n  const newCases = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      value: summary.data.new\r\n    }\r\n  })\r\n\r\n  const timeline = {\r\n    cases: cases,\r\n    active: active,\r\n    recovered: recovered,\r\n    deaths:  deaths,\r\n    new: newCases\r\n  }\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <SummaryChart timeline={timeline} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SummaryView\r\n","import React from 'react'\r\nimport { getPercentage, formatNumber } from 'utils/helpers'\r\n\r\nconst SUMMARY_COLORS = new Map()\r\n  .set('cases', 'text-red-200')\r\n  .set('new', 'text-orange-500')\r\n  .set('active', 'text-orange-300')\r\n  .set('recovered', 'text-green-300')\r\n  .set('deaths', 'text-red-500')\r\n\r\nfunction getColor(key) {\r\n  return SUMMARY_COLORS.get(key)\r\n}\r\n\r\nfunction NumberSummary({ summary, cases }) {\r\n  const shouldShowPercentage = (key) => {\r\n    return !(key === 'cases')\r\n  }\r\n\r\n  return (\r\n    <article className=\"flex flex-col mr-6 lg:mr-12 last:mr-0\">\r\n      <span className=\"uppercase text-sm font-medium tracking-wider\">\r\n        {summary.key}\r\n      </span>\r\n      <div>\r\n        <span className={`tracking-tighter text-2xl lg:text-3xl ${getColor(summary.key)}`}>{formatNumber(summary.value)}</span>\r\n        { shouldShowPercentage(summary.key) ? <span className={`ml-2 text-sm font-medium ${getColor(summary.key)}`}>({getPercentage(cases, summary.value)}%)</span> : null} \r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default NumberSummary\r\n","import React from 'react'\r\nimport NumberSummary from 'components/NumberSummary'\r\n\r\nfunction TopNumbers({ total }) {\r\n  const summaries = Object.entries(total)\r\n    .map(arr => {\r\n      return {\r\n        key: arr[0],\r\n        value: arr[1]\r\n      }\r\n    })\r\n\r\n  return (\r\n    <div className=\"flex overflow-auto md:justify-center mb-6\">\r\n      {summaries.map(summary => (\r\n        <NumberSummary summary={summary} key={summary.key} cases={total.cases} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopNumbers\r\n","import React from 'react'\r\nimport TopNumbers from 'components/TopNumbers'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction TitleView() {\r\n  const total = {\r\n    cases: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.cases,\r\n    new: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.new,\r\n    active: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.active,\r\n    recovered: SUMMARY_DATA[SUMMARY_DATA.length - 1].data.recovered,\r\n    deaths:  SUMMARY_DATA[SUMMARY_DATA.length - 1].data.deaths\r\n  }\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <TopNumbers total={total} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default TitleView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { formatNumber } from 'utils/helpers'\r\n\r\nconst demographyChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem) => {\r\n        const categories = new Map()\r\n          .set(0, 'Infected')\r\n          .set(1, 'Serious')\r\n          .set(2, 'Deaths')\r\n\r\n        const category = categories.get(tooltipItem.datasetIndex)\r\n        return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        stacked: true,\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        stacked: true,\r\n        ticks: {\r\n          callback: value => value,\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nfunction DemographyChart({ demography }) {\r\n  const chartRef = React.useRef(null)\r\n\r\n  const chartLabels = demography.map(d => d.generation)\r\n\r\n  const deaths = demography.map(d => d.deaths)\r\n  const infected = demography.map(d => d.others)\r\n  const serious = demography.map(d => d.serious)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'horizontalBar',\r\n      data: {\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            label: 'infected',\r\n            backgroundColor: 'rgba(254, 215, 215, 1)',\r\n            data: infected,\r\n          },\r\n          {\r\n            label: 'serious',\r\n            backgroundColor: 'rgba(252, 129, 129, 1)',\r\n            data: serious,\r\n          },\r\n          {\r\n            label: 'deaths',\r\n            backgroundColor: 'rgba(229, 62, 62, 1)',\r\n            data: deaths,\r\n          },\r\n        ],\r\n      },\r\n      options: demographyChartOptions,\r\n    })\r\n  })\r\n\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"150px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DemographyChart\r\n","import React from 'react'\r\nimport DemographyChart from 'components/DemographyChart'\r\nimport DEMOGRAPHY from 'data/demography.json'\r\n\r\nfunction DemographyView() {\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-6\">Demography</h3>\r\n      <DemographyChart demography={DEMOGRAPHY}/>\r\n      <p className=\"text-xs text-gray-500 mt-6\">\r\n        \"Unknown\" includes undisclosed or under confirmation. This data has different publication date from Japan's Ministry of Health and Labor Welfare so it may be inconsistent with other data.</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default DemographyView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { formatNumber } from 'utils/helpers'\r\n\r\nconst testedChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem)=> {\r\n      const categories = new Map()\r\n        .set(0, 'Tested')\r\n        .set(1, 'Positive')\r\n\r\n      const category = categories.get(tooltipItem.datasetIndex)\r\n      return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          maxRotation: 0,\r\n          callback: (value, index) => {\r\n            return index % 3 === 0 ? value.replace('2020/', '') : ''\r\n          },\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nfunction TestedChart({ tested }) {\r\n  const chartRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: tested.map(t => t.date),\r\n        datasets: [\r\n          {\r\n            label: 'Tested',\r\n            backgroundColor: 'rgba(226, 232, 240, 1)',\r\n            borderColor: 'rgba(226, 232, 240, 1)',\r\n            data: tested.map(t => t.tested),\r\n          },\r\n          {\r\n            label: 'Positive',\r\n            backgroundColor: 'rgba(254, 215, 215, 1)',\r\n            borderColor: 'rgba(254, 215, 215, 1)',\r\n            data: tested.map(t => t.testedPositive),\r\n          },\r\n        ],\r\n      },\r\n      options: testedChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"150px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestedChart\r\n","import React from 'react'\r\nimport TestedChart from 'components/TestedChart'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction TestedView() {\r\n  const tested = SUMMARY_DATA.map(s => {\r\n    return {\r\n      date: s.date,\r\n      tested: s.data.tested,\r\n      testedPositive: s.data.cases\r\n    }\r\n  })\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-6\">Tests</h3>\r\n      <TestedChart tested={tested}/>\r\n      <p className=\"text-xs text-gray-500 mt-6\">Testing is done via polymerase chain reaction (PCR) which can be inaccurate so multiple tests are done on a single person which only counts as one record in this data.</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default TestedView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { formatNumber } from 'utils/helpers'\r\n\r\nconst prefectureChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem) => {\r\n        const categories = new Map()\r\n          .set(0, 'Active')\r\n          .set(1, 'Recovered')\r\n          .set(2, 'Deaths')\r\n\r\n        const category = categories.get(tooltipItem.datasetIndex)\r\n        return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        stacked: true,\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        stacked: true,\r\n        ticks: {\r\n          callback: value => value,\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\n\r\nfunction PrefectureChart({ prefecture }) {\r\n  const chartRef = React.useRef(null)\r\n\r\n  const chartLabels = prefecture.map(d => d.data.prefecture)\r\n  const active = prefecture.map(d => d.data.active)\r\n  const recovered = prefecture.map(d => d.data.recovered)\r\n  const deaths = prefecture.map(d => d.data.deaths)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'horizontalBar',\r\n      data: {\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            label: 'Active',\r\n            backgroundColor: 'rgba(251, 211, 141, 1)',\r\n            data: active,\r\n          },\r\n          {\r\n            label: 'Recovered',\r\n            backgroundColor: 'rgba(154, 230, 180, 1)',\r\n            data: recovered,\r\n          },\r\n          {\r\n            label: 'Deaths',\r\n            backgroundColor: 'rgba(245, 101, 101, 1)',\r\n            data: deaths,\r\n          },\r\n        ],\r\n      },\r\n      options: prefectureChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"500px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PrefectureChart\r\n","import React from 'react'\r\nimport PrefectureChart from 'components/PrefectureChart'\r\nimport PREFECTURE_INFECTIONS from 'data/prefecture-infections.json'\r\nimport { uniqByKeepLast } from 'utils/helpers'\r\n\r\nfunction PrefectureView() {\r\n  const latestPrefectureData = uniqByKeepLast(PREFECTURE_INFECTIONS, it => it.data.prefecture)\r\n    .sort((a, b) => b.data.cases - a.data.cases)\r\n  \r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-2\">Prefectures</h3>\r\n      <PrefectureChart prefecture={latestPrefectureData} />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PrefectureView\r\n","import React from 'react'\r\nimport { VectorMap } from '@south-paw/react-vector-maps'\r\nimport Japan from 'constants/japan-vector-map.json'\r\nimport styles from './japan-map.module.css'\r\nimport PREFECTURES from 'constants/prefectures.json'\r\nimport PREFECTURE_INFECTIONS from 'data/prefecture-infections.json'\r\nimport { uniqByKeepLast } from 'utils/helpers'\r\n\r\nconst prefectureInfections = uniqByKeepLast(PREFECTURE_INFECTIONS, it => it.data.prefecture)\r\n  .sort((a, b) => b.data.cases - a.data.cases)\r\n  .map(p => {\r\n    return {\r\n      prefecture: p.data.prefecture,\r\n      cases: p.data.cases\r\n    }\r\n  })\r\n\r\nfunction getSeverity(id) {\r\n  const code = id.replace('jp-', '')\r\n  const prefectureName = PREFECTURES.find(p => Number(p.code) === Number(code)).en\r\n  const infection = prefectureInfections.find(p => p.prefecture === prefectureName)\r\n\r\n  if (Number(infection.cases) === 0) {\r\n    return ''\r\n  }\r\n\r\n  const ranking = prefectureInfections.indexOf(infection) + 1\r\n\r\n  if (ranking <= 10) {\r\n    return 'one'\r\n  }\r\n\r\n  if (ranking <= 20) {\r\n    return 'two'\r\n  }\r\n  \r\n  if (ranking <= 30) {\r\n    return 'three'\r\n  }\r\n  \r\n  if (ranking <= 40) {\r\n    return 'four'\r\n  }\r\n\r\n  return 'five'\r\n}\r\n\r\nfunction JapanMap() {\r\n  const updatedLayers = Japan.layers.map(l => {\r\n    return {\r\n      ...l,\r\n      'data-severity': getSeverity(l.id)\r\n    }\r\n  })\r\n\r\n  const paintedJapan = {\r\n    ...Japan,\r\n    layers: updatedLayers\r\n  }\r\n  \r\n  return (\r\n    <div className={styles.japan}>\r\n      <VectorMap {...paintedJapan} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JapanMap\r\n","import React from 'react'\r\nimport styles from './japan-map-label.module.css'\r\n\r\nfunction JapanMapLabel() {\r\n  return (\r\n    <div className={`${styles.mapLabel} flex flex-col`}>\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-red-600 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 10 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-red-400 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 11-20 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-orange-400 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 21-30 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-orange-300 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 31-40 in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-orange-200 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">top 41+ in # of cases</span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center\">\r\n        <div className=\"w-3 h-3 rounded-sm bg-gray-600 mr-2\"/>\r\n        <span className=\"text-xs text-gray-500\">no cases</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JapanMapLabel\r\n","import React from 'react'\r\nimport JapanMap from 'components/JapanMap'\r\nimport JapanMapLabel from 'components/JapanMapLabel'\r\n\r\nfunction MapView() {\r\n  const style = {\r\n    top: '6rem',\r\n    paddingTop: '2rem',\r\n    paddingBottom: '2rem'\r\n  }\r\n\r\n  return (\r\n    <div className=\"sticky\" style={style}>\r\n      <JapanMap />  \r\n      <JapanMapLabel />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { formatNumber } from 'utils/helpers'\r\n\r\nconst symptomsChartOptions = {\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    itemSort: (arr) => arr,\r\n    callbacks: {\r\n      label: (tooltipItem)=> {\r\n      const categories = new Map()\r\n        .set(0, 'Asymptomatic')\r\n        .set(1, 'Symptomatic')\r\n\r\n      const category = categories.get(tooltipItem.datasetIndex)\r\n      return `${category}: ${formatNumber(tooltipItem.value)}`\r\n      }\r\n    }\r\n  },\r\n  hover: {\r\n    mode: 'index',\r\n    intersect: false,\r\n  },\r\n  legend: {\r\n    display: false\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          maxRotation: 0,\r\n          callback: (value, index) => {\r\n            return index % 3 === 0 ? value.replace('2020/', '') : ''\r\n          },\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          callback: value => formatNumber(value),\r\n          fontColor: '#a0aec0'\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nfunction SymptomsChart({ symptoms }) {\r\n  const chartRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    new Chart(contextRef, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: [...symptoms.map(s => s.label)],\r\n        datasets: [\r\n          {\r\n            label: 'Asymptomatic',\r\n            backgroundColor: 'rgba(226, 232, 240, 1)',\r\n            borderColor: 'rgba(226, 232, 240, 1)',\r\n            data: symptoms.map(s => s.asymptomatic),\r\n          },\r\n          {\r\n            label: 'Symptomatic',\r\n            backgroundColor: 'rgba(254, 215, 215, 1)',\r\n            borderColor: 'rgba(254, 215, 215, 1)',\r\n            data: symptoms.map(s => s.symptomatic),\r\n          }\r\n        ],\r\n      },\r\n      options: symptomsChartOptions,\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"150px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SymptomsChart\r\n","import React from 'react'\r\nimport SymptomsChart from 'components/SymptomsChart'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\n\r\nfunction SymptomsView() {\r\n  const symptoms = SUMMARY_DATA.map(summary => {\r\n    return {\r\n      label: summary.date,\r\n      symptomatic: summary.data.cases_with_symptoms,\r\n      asymptomatic: Number(summary.data.cases) - Number(summary.data.cases_with_symptoms),\r\n    }\r\n  })\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-6\">Symptoms</h3>\r\n      <SymptomsChart symptoms={symptoms}/>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SymptomsView\r\n","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport { formatNumber } from 'utils/helpers'\r\nimport TIMELINE from 'data/timeline.json'\r\n\r\nfunction TimelineChart({ events, updateFeatured }) {\r\n  const timelineChartOptions = {\r\n    tooltips: {\r\n      mode: 'index',\r\n      intersect: false,\r\n      itemSort: (arr) => arr,\r\n      callbacks: {\r\n        label: (tooltipItem) => {\r\n          const date = tooltipItem.label\r\n\r\n          const event = TIMELINE.find(t => t.date === date)\r\n          if (!!event) {\r\n            updateFeatured(event)\r\n          }\r\n\r\n          return tooltipItem.datasetIndex !== 0 ? `Cases: ${formatNumber(tooltipItem.value)}` : ''\r\n        }\r\n      }\r\n    },\r\n    hover: {\r\n      mode: 'index',\r\n      intersect: false,\r\n    },\r\n    legend: {\r\n      display: false,\r\n      // onHover: (e) => {\r\n      //    e.target.style.cursor = 'pointer'\r\n      // },\r\n      // labels: {\r\n      //   fontColor: '#f7fafc',\r\n      // },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            maxRotation: 0,\r\n            callback: (value, index, dataSet) => {\r\n              const shouldShow = index === 0 || index % 2 === 0\r\n  \r\n              return shouldShow ? value.replace('2020/', '') : ''\r\n            },\r\n            fontColor: '#a0aec0'\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            callback: value => formatNumber(value),\r\n            fontColor: '#a0aec0'\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const chartRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    const contextRef = chartRef.current.getContext('2d')\r\n\r\n    const eventData = events.map(e => e.hasEvent ? Number(e.value) + 500 : 0)\r\n\r\n    new Chart(contextRef, {\r\n      data: {\r\n        labels: events.map(e => e.label),\r\n        datasets: [\r\n          {\r\n            type: 'scatter',\r\n            label: 'Events',\r\n            backgroundColor: '#63b3ed',\r\n            data: eventData,\r\n            pointRadius: eventData.map(val => val !== 0 ? 2 : 0),\r\n            hitRadius: eventData.map(val => val !== 0 ? 1 : 0),\r\n            hoverRadius: eventData.map(val => val !== 0 ? 4 : 0),\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: 'Cases',\r\n            backgroundColor: 'rgba(254, 215, 215, 0.8)',\r\n            data: events.map(e => e.value),\r\n            pointRadius: 0,\r\n            hoverRadius: 0\r\n          }\r\n        ],\r\n      },\r\n      options: timelineChartOptions\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas height=\"100px\" ref={chartRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimelineChart\r\n","import React from 'react'\r\n\r\nfunction TimelineReader({ event }) {\r\n\r\n  const toShortDate = (dateString) => {\r\n    const date = new Date(dateString)\r\n    const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n    const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n    const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n    return `${mo} ${da}, ${ye}`\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"text-gray-400 mb-2 text-xs uppercase font-medium\">\r\n        { toShortDate(event.date) }\r\n      </p>\r\n      { event.events.map(desc => <p key={desc} className=\"text-gray-400 text-sm mb-2 last:mb-0\">{ desc }</p>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimelineReader\r\n","import React from 'react'\r\nimport TimelineChart from 'components/TimelineChart'\r\nimport SUMMARY_DATA from 'data/summary.json'\r\nimport TIMELINE from 'data/timeline.json'\r\nimport { uniqByKeepLast } from 'utils/helpers'\r\nimport TimelineInfo from 'components/TimelineInfo'\r\n\r\nfunction TimelineView() {\r\n  const [featured, updateFeatured] = React.useState(TIMELINE[TIMELINE.length - 1])\r\n\r\n  const dates = [\r\n    ...SUMMARY_DATA.map(s => s.date),\r\n    ...TIMELINE.map(t => t.date)\r\n  ]\r\n\r\n  const combinedDates = uniqByKeepLast(dates, val => val)\r\n    .sort((a, b) => b.date - a.date)\r\n\r\n  const events = combinedDates.map(date => {\r\n    const infection = SUMMARY_DATA.find(c => c.date === date)\r\n    const event = TIMELINE.find(t => t.date === date)\r\n\r\n    return {\r\n      label: date,\r\n      value: infection ? infection.data.cases : '',\r\n      hasEvent: !!event\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"font-medium text-center mb-6\">Timeline</h3>\r\n      <section className=\"flex flex-col lg:flex-row\">\r\n        <div className=\"w-100 lg:w-3/5 lg:mr-2\">\r\n          <TimelineChart events={events} updateFeatured={updateFeatured} />\r\n        </div>\r\n        <div className=\"w-100 lg:w-2/5\">\r\n          <TimelineInfo event={featured}/>\r\n        </div>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TimelineView\r\n","import React from 'react'\r\n\r\nfunction ThanksView() {\r\n  const sources = [\r\n    {\r\n      title: 'Quarantine Now',\r\n      author: 'by Ben Kuhn and Yuri Vishnevsky',\r\n      link: 'https://observablehq.com/@yurivish/quarantine-now',\r\n      desc: 'My initial inspiration for creating this project.'\r\n    },\r\n    {\r\n      title: 'COVID-19 Situation Report in Japan',\r\n      author: 'by toyokeizai.net and Kazuki Ogiwara',\r\n      link: 'https://toyokeizai.net/sp/visual/tko/covid19/en.html',\r\n      desc: 'My main source of data.'\r\n    },\r\n    {\r\n      title: 'Coronavirus Cases in Japan by Prefecture',\r\n      author: 'by nippon.com',\r\n      link: 'https://www.nippon.com/en/japan-data/h00657/coronavirus-cases-in-japan-by-prefecture.html',\r\n      desc: 'The source of data in timeline events. If you want a more detailed data, I recommend reading the article.'\r\n    },\r\n  ]\r\n\r\n\r\n  return (\r\n    <section className=\"mb-6\">\r\n      <h3 className=\"font-medium text-center mb-6\">Thanks</h3>\r\n      <ul className=\"text-gray-400 text-sm list-disc\">\r\n        {sources.map(source => {\r\n          return (\r\n            <li key={source.title} className=\"mb-6 last:mb-0\">\r\n              <div className=\"flex\">\r\n                <a href={source.link} target=\"_blank\" rel=\"noreferrer noopener\" className=\"font-medium mr-2 underline\">{ source.title}</a>\r\n                <span className=\"text-gray-500\">{source.author}</span>\r\n              </div>\r\n              <p>\r\n                { source.desc }\r\n              </p>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default ThanksView\r\n","import React from 'react'\r\nimport MetaTags from 'react-meta-tags'\r\nimport SummaryView from 'views/SummaryView'\r\nimport TitleView from 'views/TitleView'\r\nimport DemographyView from 'views/DemographyView'\r\nimport TestedView from 'views/TestedView'\r\nimport PrefectureView from 'views/PrefectureView'\r\nimport MapView from 'views/MapView'\r\nimport SymptomsView from 'views/SymptomsView'\r\nimport TimelineView from 'views/TimelineView'\r\nimport ThanksView from 'views/ThanksView'\r\n\r\nfunction Home() {\r\n  return (\r\n    <main className=\"bg-gray-800 text-gray-400 text-lg\">\r\n      <MetaTags>\r\n        <title>Japan COVID-19 Status</title>\r\n        <meta name=\"description\" content=\"Japan COVID-19 Status\" />\r\n        <meta property=\"og:title\" content=\"Japan COVID-19 Status\" />\r\n      </MetaTags>\r\n\r\n      <div className=\"container mx-auto p-4\">\r\n        <h1 className=\"font-medium text-gray-200 text-3xl mb-6 text-center\">Japan COVID-19 Status</h1>\r\n        <TitleView />\r\n\r\n        <div className=\"mb-6 flex flex-col lg:flex-row\">\r\n          <div className=\"w-100 lg:w-3/5 lg:mr-24\">\r\n            <SummaryView />\r\n            <PrefectureView />\r\n          </div>\r\n          <div className=\"w-100 lg:w-2/5\">\r\n            <MapView />\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"mb-6\">\r\n          <TimelineView />\r\n        </div>\r\n\r\n        <div className=\"mb-6 flex flex-col lg:flex-row\">\r\n          <div className=\"w-100 lg:w-1/2 lg:mr-8\">\r\n            <DemographyView />\r\n          </div>\r\n          <div className=\"w-100 lg:w-1/2\">\r\n            <TestedView />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-6 flex flex-col lg:flex-row\">\r\n          <div className=\"w-100 lg:w-1/2 lg:mr-12\">\r\n            <SymptomsView />\r\n          </div>\r\n          <div className=\"w-100 lg:w-1/2\">\r\n            <ThanksView />\r\n          </div>\r\n        </div>\r\n\r\n        <span className=\"text-xs text-gray-500\">\r\n          Made by <a className=\"underline\" href=\"https://tkmi.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">me</a>. Source code available <a className=\"underline\" href=\"https://github.com/gitkumi/japan-covid-19-status\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>. Created with React.js, Chart.js, Tailwind, and the other 800+ Node.js libraries.\r\n        </span>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport Home from './pages/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <Home />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './assets/styles/tailwind.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}